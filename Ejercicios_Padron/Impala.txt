--¿Qué es Impala?

El proyecto Impala con licencia Apache lleva la tecnología de base de datos escalable en paralelo a Hadoop, permitiendo a los usuarios realizar consultas 
SQL de baja latencia a los datos almacenados en HDFS y Apache HBase sin necesidad de movimiento o transformación de los datos. Impala está integrada con Hadoop 
para utilizar los mismos archivos y formato de datos, metadatos, seguridad y frameworks de gestión de recursos utilizados por MapReduce, Apache Hive, Apache Pig 
y otro software de Hadoop.

--¿En qué se diferencia de Hive?
Existen varias diferencias entre Hive e Impala.

Impala tiene un motor distribudo de consultas sobre HDFS , mientras que Hive es un de un sistema de data warehouse sobre hadoop.
Impala tiene una arquitectura MPP ((Massively Parallel Processing)) por ello no usa map/reduce de Hadoop sino que utiliza procesos que se ejecutan en los nodos y 
que consultan directamente sobre HDFS o HBase, por otro lado hive si tiene una arquitectura map/reduce de hadoop.
Impala tiene una latencia menor , mayor consumo de memoria y CPU que hive, el cual es mas robusto en sus consultas.


--Comando INVALIDATE METADATA, ¿en qué consiste?
La instrucción INVALIDATE METADATA marca los metadatos de una o todas las tablas como obsoletos. 
La próxima vez que el servicio Impala realiza una consulta en una tabla cuyos metadatos se invalidan,
Impala vuelve a cargar los metadatos asociados antes de que continúe la consulta. 
Como se trata de una operación muy cara en comparación con la actualización incremental de metadatos realizada por la instrucción REFRESH,
cuando sea posible, prefiera REFRESH en lugar de INVALIDATE METADATA.


-- Hacer invalidate metadata en Impala de la base de datos datos_padron.

INVALIDATE METADATA padron_txt;


--
-- Calcular el total de EspanolesHombres, espanolesMujeres, ExtranjerosHombres y
ExtranjerosMujeres agrupado por DESC_DISTRITO y DESC_BARRIO.

SELECT sum(EspanolesHombres), sum(espanolesMujeres), sum(ExtranjerosHombres), sum (extranjerosmujeres)
FROM padron_txt group by DESC_DISTRITO, DESC_BARRIO;

RESULT IMPALA > Fetched 0 row(s) in 7.29s

-- Llevar a cabo las consultas en Hive en las tablas padron_txt_2 y padron_parquet_2
(No deberían incluir espacios innecesarios). ¿Alguna conclusión?

SELECT sum(EspanolesHombres), sum(espanolesMujeres), sum(ExtranjerosHombres), sum (extranjerosmujeres)
FROM padron_txt_2 group by DESC_DISTRITO, DESC_BARRIO;

RESULT HIVE > Time taken: 39.12 seconds, Fetched: 132 row(s)

SELECT sum(EspanolesHombres), sum(espanolesMujeres), sum(ExtranjerosHombres), sum (extranjerosmujeres)
FROM padron_parquet_2 group by DESC_DISTRITO, DESC_BARRIO;

RESULT HIVE > Time taken: 28.716 seconds, Fetched: 132 row(s)

-- Llevar a cabo la misma consulta sobre las mismas tablas en Impala. ¿Alguna
conclusión?

SELECT sum(CAST (EspanolesHombres AS INT)), sum( CAST(espanolesMujeres AS INT)), sum(CAST (ExtranjerosHombres AS INT)), sum (CAST (extranjerosmujeres AS INT))
FROM padron_txt_2 group by DESC_DISTRITO, DESC_BARRIO;

RESULT IMPALA > Fetched 132 row(s) in 1.10s

SELECT sum(CAST (EspanolesHombres AS INT)), sum( CAST(espanolesMujeres AS INT)), sum(CAST (ExtranjerosHombres AS INT)), sum (CAST (extranjerosmujeres AS INT))
FROM padron_parquet_2 group by DESC_DISTRITO, DESC_BARRIO;

RESULT IMPALA > Fetched 132 row(s) in 0.57s

Las consultas son unas 30 veces mas rapidas si la tabla esta con formato parquet, hive es mucho mas lento que impala para consultas.





